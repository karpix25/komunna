# bot/src/main.py
# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

import asyncio
import logging
import os
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://backend:8000")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_validation_data = {}


class TelegramUserValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Telegram Bot API"""

    def __init__(self, bot: Bot):
        self.bot = bot

    async def validate_user_by_id(self, user_id: int) -> dict:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Bot API
            chat_member = await self.bot.get_chat_member(chat_id=user_id, user_id=user_id)
            user = chat_member.user

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            user_data = {
                "telegram_id": str(user.id),
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "is_bot": user.is_bot,
                "is_premium": getattr(user, 'is_premium', False),
                "language_code": getattr(user, 'language_code', None),
                "validation_method": "telegram_bot_api",
                "validated_at": None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ backend
            }

            return {
                "success": True,
                "user_data": user_data,
                "error": None
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            return {
                "success": False,
                "user_data": None,
                "error": str(e)
            }

    async def validate_user_by_username(self, username: str) -> dict:
        """
        –ü–æ–ø—ã—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ Bot API)
        """
        try:
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            if username.startswith('@'):
                username = username[1:]

            # –í Bot API –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
            # –ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º
            return {
                "success": False,
                "user_data": None,
                "error": "Validation by username requires user interaction with bot"
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ username {username}: {str(e)}")
            return {
                "success": False,
                "user_data": None,
                "error": str(e)
            }


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
validator = TelegramUserValidator(bot)


# API –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
class BotAPIHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç backend"""

    @staticmethod
    async def validate_user(request_data: dict) -> dict:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç backend API
        """
        telegram_id = request_data.get("telegram_id")
        username = request_data.get("username")

        if telegram_id:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ telegram_id
            result = await validator.validate_user_by_id(int(telegram_id))
        elif username:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ username
            result = await validator.validate_user_by_username(username)
        else:
            return {
                "success": False,
                "user_data": None,
                "error": "telegram_id or username is required"
            }

        return result


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = message.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—É–¥—É—â–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    user_validation_data[user.id] = {
        "telegram_id": str(user.id),
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "is_bot": user.is_bot,
        "is_premium": getattr(user, 'is_premium', False),
        "language_code": user.language_code,
        "last_interaction": message.date.isoformat()
    }

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üîê –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
        callback_data=f"validate_{user.id}"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚ÑπÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ",
        callback_data=f"info_{user.id}"
    ))

    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Communa Bot!

üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ ID: {user.id}
‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è: {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ Communa.
"""

    await message.answer(
        welcome_text,
        reply_markup=keyboard.as_markup()
    )


@dp.message(Command("validate"))
async def cmd_validate(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /validate - –∑–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    user = message.from_user

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await validator.validate_user_by_id(user.id)

    if result["success"]:
        user_data = result["user_data"]

        validation_text = f"""
‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!

üìã –í–∞—à–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ Telegram ID: {user_data['telegram_id']}
‚Ä¢ Username: @{user_data['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è: {user_data['first_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –§–∞–º–∏–ª–∏—è: {user_data['last_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ Premium: {'–î–∞' if user_data['is_premium'] else '–ù–µ—Ç'}
‚Ä¢ –Ø–∑—ã–∫: {user_data['language_code'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üîê –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.
"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ backend (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await send_validation_to_backend(user_data)

    else:
        validation_text = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result['error']}"

    await message.answer(validation_text)


@dp.message(Command("info"))
async def cmd_info(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = message.from_user

    info_text = f"""
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:

üÜî –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ Telegram ID: {user.id}
‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è: {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ë–æ—Ç: {'–î–∞' if user.is_bot else '–ù–µ—Ç'}
‚Ä¢ Premium: {'–î–∞' if getattr(user, 'is_premium', False) else '–ù–µ—Ç'}
‚Ä¢ –Ø–∑—ã–∫: {user.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üíæ –°—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–æ—Ç–µ: {'–î–∞' if user.id in user_validation_data else '–ù–µ—Ç'}
"""

    await message.answer(info_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data.startswith("validate_"))
async def process_validate_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    user_id = int(callback_query.data.split("_")[1])

    if callback_query.from_user.id != user_id:
        await callback_query.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    result = await validator.validate_user_by_id(user_id)

    if result["success"]:
        await callback_query.message.edit_text(
            "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω!\n\n" +
            "–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É Communa."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ backend
        await send_validation_to_backend(result["user_data"])
    else:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result['error']}"
        )

    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("info_"))
async def process_info_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    user_id = int(callback_query.data.split("_")[1])

    if callback_query.from_user.id != user_id:
        await callback_query.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        return

    user = callback_query.from_user

    info_text = f"""
üìä –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üÜî ID: {user.id}
üë§ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìù –ò–º—è: {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üìù –§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
‚≠ê Premium: {'–î–∞' if getattr(user, 'is_premium', False) else '–ù–µ—Ç'}
"""

    await callback_query.message.edit_text(info_text)
    await callback_query.answer()


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ backend
async def send_validation_to_backend(user_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ backend"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                    f"{BACKEND_URL}/api/v1/telegram/bot-validate",
                    json=user_data,
                    headers={"Content-Type": "application/json"}
            ) as response:
                if response.status == 200:
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['telegram_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ backend")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ backend: {response.status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {str(e)}")


# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_validation_request(request_data: dict) -> dict:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç backend API
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ backend
    """
    return await BotAPIHandler.validate_user(request_data)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.set_my_commands([
        types.BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="validate", description="üîê –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
        types.BotCommand(command="info", description="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"),
    ])

    if WEBHOOK_URL:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())