"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Kommuna.
–ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î.
"""

import os
import logging
from contextlib import asynccontextmanager
from urllib.parse import urlparse
from datetime import datetime
from typing import AsyncGenerator

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from aiogram import Bot
from bot.src.main_bot.app import build_dispatcher

from .config import settings
from .database import init_database, close_database, check_database_connection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.logging.level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

WEBHOOK_PATH = "/bot/webhook"  # <- –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–ª—É—à–∞–µ–º
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")


def _build_webhook_url() -> str | None:
    # –ü–æ–∑–≤–æ–ª—è–µ–º –∑–∞–¥–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–æ–ª–Ω—ã–π URL, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
    full = (os.getenv("TELEGRAM_WEBHOOK_URL") or "").strip()
    if full:
        return full

    domain = (os.getenv("TELEGRAM_WEBHOOK_DOMAIN") or "").strip()
    if not domain:
        return None

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–æ–º–µ–Ω –≤ –ª—é–±–æ–º –≤–∏–¥–µ: "e5940...", "https://e5940.../",
    # "https://e5940.../—á—Ç–æ-—Ç–æ" ‚Äî –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ "https://host"
    parsed = urlparse(domain if domain.startswith("http") else f"https://{domain}")
    host = parsed.netloc or parsed.path  # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–æ—Å—Ç–æ "e5940..."
    host = host.rstrip("/")              # —É–±–∏—Ä–∞–µ–º —Ö–≤–æ—Å—Ç–æ–≤–æ–π "/"
    return f"https://{host}{WEBHOOK_PATH}"


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.
    """
    # ========== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {settings.app.project_name} –≤ —Ä–µ–∂–∏–º–µ {settings.app.environment}")

    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

    bot = Bot(token=token)
    dp = build_dispatcher()

    def _iter_routers(r):
        # –æ–±–æ–π–¥—ë–º –¥–µ—Ä–µ–≤–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        for child in getattr(r, "sub_routers", []):
            yield child
            yield from _iter_routers(child)

    names = [r.name or "<noname>" for r in _iter_routers(dp)]
    logger.info("DP routers connected: %s", names)

    await dp.emit_startup(bot=bot)  # <--- –≤–∞–∂–Ω–æ
    logger.info("DP startup emitted")
    app.state.bot = bot
    app.state.dp = dp
    logger.info("Aiogram Bot & Dispatcher initialized")

    url = _build_webhook_url()
    logger.info("Computed webhook URL: %r", url)

    if url:
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            await bot.set_webhook(
                url=url,
                secret_token=WEBHOOK_SECRET or None,
                allowed_updates=["message", "callback_query"],
            )
            logger.info("Webhook set to %s", url)
        except Exception as e:
            logger.exception("Failed to set webhook: %s", e)

    try:
        yield
    finally:
        # --- shutdown ---
        try:
            # ‚úÖ –∏ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await dp.emit_shutdown(bot=bot)  # <--- –≤–∞–∂–Ω–æ
            logger.info("DP shutdown emitted")
        except Exception:
            logger.exception("DP shutdown failed")
        await bot.session.close()
        logger.info("Bot session closed")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_database()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if await check_database_connection():
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        logger.info(f"üéâ {settings.app.project_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://{settings.app.host}:{settings.app.port}")
        if not settings.app.is_production:
            logger.info(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://{settings.app.host}:{settings.app.port}/docs")

        yield

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        raise
    finally:
        await bot.session.close()
        logger.info("Bot session closed")

    # ========== –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ ==========
    yield

    # ========== –ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await close_database()
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


def create_application() -> FastAPI:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    app = FastAPI(
        title=settings.app.project_name,
        description="API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Kommuna –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ Telegram",
        version="1.0.0",
        docs_url="/docs" if not settings.app.is_production else None,
        redoc_url="/redoc" if not settings.app.is_production else None,
        openapi_url="/openapi.json" if not settings.app.is_production else None,
        lifespan=lifespan,
        debug=settings.app.debug
    )

    from .api.v1.endpoints.telegram_webhook import router as telegram_webhook_router
    app.include_router(telegram_webhook_router)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"] if settings.app.is_development else [
            settings.telegram.webhook_domain,
            "http://localhost:3000",
        ],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # –ë–∞–∑–æ–≤—ã–µ —Ä–æ—É—Ç—ã
    setup_routes(app)

    return app


def setup_routes(app: FastAPI) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ä–æ—É—Ç—ã."""

    @app.get("/")
    async def root():
        """–ë–∞–∑–æ–≤—ã–π endpoint."""
        return {
            "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {settings.app.project_name} API!",
            "version": "1.0.0",
            "environment": settings.app.environment,
        }

    @app.get("/health")
    async def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        db_healthy = await check_database_connection()

        return {
            "status": "healthy" if db_healthy else "unhealthy",
            "database": "connected" if db_healthy else "disconnected",
            "timestamp": datetime.utcnow().isoformat(),
            "environment": settings.app.environment
        }


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_application()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    import uvicorn

    uvicorn.run(
        "src.main:app",
        host=settings.app.host,
        port=settings.app.port,
        reload=settings.app.reload and settings.app.is_development,
        log_level=settings.logging.level.lower(),
    )


if __name__ == "__main__":
    main()