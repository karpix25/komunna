# bot/src/main.py
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞

import asyncio
import logging
import os
import aiohttp
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_MAIN_BOT_TOKEN") or os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://backend:8000")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –í–ê–ñ–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è WebApp
WEBAPP_URL = "https://n8n-karpix-communa.g44y6r.easypanel.host"

if not BOT_TOKEN:
    raise ValueError("TELEGRAM_MAIN_BOT_TOKEN environment variable is required")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_validation_data = {}


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π WebApp –∫–Ω–æ–ø–∫–æ–π
    """
    user = message.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_validation_data[user.id] = {
        "telegram_id": str(user.id),
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "is_bot": user.is_bot,
        "is_premium": getattr(user, 'is_premium', False),
        "language_code": user.language_code,
        "last_interaction": message.date.isoformat()
    }

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π WebApp –∫–Ω–æ–ø–∫–æ–π
    keyboard = InlineKeyboardBuilder()
    
    # –ì–õ–ê–í–ù–ê–Ø –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
    keyboard.add(InlineKeyboardButton(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Kommuna App",
        web_app=types.WebAppInfo(url=WEBAPP_URL)
    ))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.add(InlineKeyboardButton(
        text="üîê –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        callback_data=f"validate_{user.id}"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚ÑπÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ",
        callback_data=f"info_{user.id}"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü
    keyboard.adjust(1)

    welcome_text = f"""
üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kommuna!

üë§ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

‚Ä¢ **ID:** `{user.id}`
‚Ä¢ **Username:** @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ **–ò–º—è:** {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ **Premium:** {'‚úÖ' if getattr(user, 'is_premium', False) else '‚ùå'}

üåü **Kommuna** - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∏ –æ–±—É—á–µ–Ω–∏—è –≤ Telegram.

**–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!** üëá
"""

    await message.answer(
        welcome_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )


@dp.message(Command("app"))
async def cmd_app(message: Message):
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Kommuna App",
        web_app=types.WebAppInfo(url=WEBAPP_URL)
    ))

    await message.answer(
        "üéì **Kommuna App**\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )


@dp.message(Command("debug"))
async def cmd_debug(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    user = message.from_user
    
    debug_info = f"""
üîß **Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**

**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
‚Ä¢ Bot Token: `{'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`
‚Ä¢ Backend URL: `{BACKEND_URL}`
‚Ä¢ WebApp URL: `{WEBAPP_URL}`
‚Ä¢ Webhook URL: `{WEBHOOK_URL or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (polling mode)'}`

**–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ ID: `{user.id}`
‚Ä¢ Username: `{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
‚Ä¢ First Name: `{user.first_name}`
‚Ä¢ Language: `{user.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
‚Ä¢ Premium: `{'‚úÖ' if getattr(user, 'is_premium', False) else '‚ùå'}`

**–°—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ:**
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–æ—Ç–µ: `{'‚úÖ' if user.id in user_validation_data else '‚ùå'}`
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üöÄ –¢–µ—Å—Ç WebApp",
        web_app=types.WebAppInfo(url=WEBAPP_URL)
    ))
    
    await message.answer(
        debug_info,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )


@dp.message(Command("validate"))
async def cmd_validate(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /validate - —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API"""
    user = message.from_user

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ backend
        user_data = {
            "telegram_id": str(user.id),
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "is_premium": getattr(user, 'is_premium', False),
            "language_code": user.language_code,
            "validation_method": "telegram_bot_direct"
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ backend
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{BACKEND_URL}/api/auth/telegram/bot-validate",
                json=user_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                if response.status == 200:
                    result_data = await response.json()
                    validation_text = f"""
‚úÖ **–í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ API —É—Å–ø–µ—à–Ω–∞!**

üìã **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ backend:**
‚Ä¢ Telegram ID: `{user_data['telegram_id']}`
‚Ä¢ Username: `@{user_data['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
‚Ä¢ –ò–º—è: `{user_data['first_name']}`
‚Ä¢ Premium: `{'‚úÖ' if user_data['is_premium'] else '‚ùå'}`

üîê **–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ Kommuna.**
"""
                else:
                    validation_text = f"‚ùå **–û—à–∏–±–∫–∞ API:** {response.status}"

    except Exception as e:
        validation_text = f"‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:** {str(e)}"

    await message.answer(validation_text, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data.startswith("validate_"))
async def process_validate_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    user_id = int(callback_query.data.split("_")[1])

    if callback_query.from_user.id != user_id:
        await callback_query.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
        return

    await callback_query.message.edit_text(
        "‚úÖ **–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω!**\n\n" +
        "üîê –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å WebApp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏.",
        parse_mode="Markdown"
    )
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("info_"))
async def process_info_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    user_id = int(callback_query.data.split("_")[1])

    if callback_query.from_user.id != user_id:
        await callback_query.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        return

    user = callback_query.from_user

    info_text = f"""
üìä **–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**

üÜî **ID:** `{user.id}`
üë§ **Username:** `@{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
üìù **–ò–º—è:** `{user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`
üìù **–§–∞–º–∏–ª–∏—è:** `{user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`
üåç **–Ø–∑—ã–∫:** `{user.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
‚≠ê **Premium:** `{'‚úÖ –î–∞' if getattr(user, 'is_premium', False) else '‚ùå –ù–µ—Ç'}`

üîó **WebApp URL:** `{WEBAPP_URL}`
"""

    await callback_query.message.edit_text(info_text, parse_mode="Markdown")
    await callback_query.answer()


# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
    try:
        update_data = await request.json()
        update = types.Update(**update_data)
        await dp.feed_update(bot, update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return web.Response(status=500)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ backend
async def send_validation_to_backend(user_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ backend"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{BACKEND_URL}/api/auth/telegram/bot-validate",
                json=user_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                if response.status == 200:
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['telegram_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ backend")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ backend: {response.status}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {str(e)}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot –¥–ª—è Kommuna...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.set_my_commands([
        types.BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="app", description="üéì –û—Ç–∫—Ä—ã—Ç—å Kommuna App"),
        types.BotCommand(command="validate", description="üîê –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
        types.BotCommand(command="debug", description="üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    ])

    if WEBHOOK_URL:
        # –†–µ–∂–∏–º webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        logger.info("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...")
        
        webhook_path = "/webhook"
        full_webhook_url = f"{WEBHOOK_URL.rstrip('/')}{webhook_path}"
        
        await bot.set_webhook(full_webhook_url)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_webhook_url}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        app = web.Application()
        app.router.add_post(webhook_path, webhook_handler)
        
        # Health check
        async def health_check(request):
            return web.json_response({
                "status": "ok", 
                "bot": "running",
                "webapp_url": WEBAPP_URL,
                "backend_url": BACKEND_URL
            })
        
        app.router.add_get("/health", health_check)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 8001)
        await site.start()
        
        logger.info("üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001")
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å webhook –∑–∞–ø—Ä–æ—Å—ã!")
        
        try:
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            await runner.cleanup()
            await bot.session.close()
    else:
        # –†–µ–∂–∏–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        logger.info(f"üåê WebApp URL: {WEBAPP_URL}")
        logger.info(f"üîó Backend URL: {BACKEND_URL}")
        
        try:
            await dp.start_polling(bot)
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
