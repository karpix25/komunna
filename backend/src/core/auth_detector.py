"""
–î–µ—Ç–µ–∫—Ç–æ—Ä —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫–æ–π –±–æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç –∏–ª–∏ –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.
"""

import logging
from typing import Optional, Tuple
from urllib.parse import urlparse

from fastapi import Request

logger = logging.getLogger(__name__)


class AuthTypeDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""

    @staticmethod
    def detect_auth_type(request: Request) -> Tuple[str, Optional[int]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞.

        –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
        1. –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Community-ID -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        2. –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç /community/{id}/ -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        3. –ï—Å–ª–∏ –ø–æ–¥–¥–æ–º–µ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        4. –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö -> –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç

        Args:
            request: HTTP –∑–∞–ø—Ä–æ—Å

        Returns:
            Tuple[str, Optional[int]]: (—Ç–∏–ø_–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, community_id)
            –≥–¥–µ —Ç–∏–ø_–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: "main" –∏–ª–∏ "community"
        """
        # –ú–µ—Ç–æ–¥ 1: –Ø–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        community_id_header = request.headers.get("X-Community-ID")
        if community_id_header:
            try:
                community_id = int(community_id_header)
                logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: community (ID: {community_id}) —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫")
                return "community", community_id
            except ValueError:
                logger.warning(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π X-Community-ID –∑–∞–≥–æ–ª–æ–≤–æ–∫: {community_id_header}")

        # –ú–µ—Ç–æ–¥ 2: URL —Å–æ–¥–µ—Ä–∂–∏—Ç community/{id}
        url_path = request.url.path
        if "/community/" in url_path:
            try:
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω /community/{id}/
                parts = url_path.split("/")
                community_idx = parts.index("community")
                if community_idx + 1 < len(parts):
                    community_id = int(parts[community_idx + 1])
                    logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: community (ID: {community_id}) —á–µ—Ä–µ–∑ URL")
                    return "community", community_id
            except (ValueError, IndexError):
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å community_id –∏–∑ URL: {url_path}")

        # –ú–µ—Ç–æ–¥ 3: –ü–æ–¥–¥–æ–º–µ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
        host = request.headers.get("host", "")
        community_id = AuthTypeDetector._extract_community_from_subdomain(host)
        if community_id:
            logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: community (ID: {community_id}) —á–µ—Ä–µ–∑ –ø–æ–¥–¥–æ–º–µ–Ω")
            return "community", community_id

        # –ú–µ—Ç–æ–¥ 4: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç
        logger.info("üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: main (–≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)")
        return "main", None

    @staticmethod
    def _extract_community_from_subdomain(host: str) -> Optional[int]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–∑ –ø–æ–¥–¥–æ–º–µ–Ω–∞.

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        - community-123.yourdomain.com -> 123
        - comm123.yourdomain.com -> 123
        - school-456.yourdomain.com -> 456

        Args:
            host: –•–æ—Å—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–ª–∏ None
        """
        try:
            if not host or "localhost" in host or "127.0.0.1" in host:
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–¥–æ–º–µ–Ω
            parts = host.split(".")
            if len(parts) < 3:  # –ù–µ—Ç –ø–æ–¥–¥–æ–º–µ–Ω–∞
                return None

            subdomain = parts[0]

            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            patterns = [
                "community-",
                "comm",
                "school-",
                "c-"
            ]

            for pattern in patterns:
                if subdomain.startswith(pattern):
                    id_part = subdomain[len(pattern):]
                    if id_part.isdigit():
                        return int(id_part)

            return None

        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è community_id –∏–∑ –ø–æ–¥–¥–æ–º–µ–Ω–∞ {host}: {e}")
            return None


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
auth_detector = AuthTypeDetector()
