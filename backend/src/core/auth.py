# backend/src/core/auth.py
"""
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ FastAPI.
–°–æ–¥–µ—Ä–∂–∏—Ç dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
"""

import logging
from typing import Optional

from fastapi import Depends, HTTPException, Request, status
from sqlalchemy.ext.asyncio import AsyncSession

from ..database import get_db_session
from ..models.user import User
from ..schemas.telegram import WebAppUser
from ..services.telegram_factory import telegram_factory
from .auth_detector import auth_detector

logger = logging.getLogger(__name__)


async def verify_telegram_webapp(
        request: Request,
        db: AsyncSession = Depends(get_db_session)
) -> WebAppUser:
    """
    Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram WebApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≥–ª–∞–≤–Ω—ã–π –±–æ—Ç –∏–ª–∏ –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞)
    –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏.

    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å –æ—Ç FastAPI
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        WebAppUser: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Raises:
        HTTPException: –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    auth_string = request.headers.get("Authorization")
    if not auth_string:
        logger.warning("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Authorization header missing"
        )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_type, community_id = auth_detector.detect_auth_type(request)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if auth_type == "main":
        auth_service = telegram_factory.get_main_bot_service()
        if not auth_service:
            logger.error("‚ùå –°–µ—Ä–≤–∏—Å –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Main bot service unavailable"
            )

    elif auth_type == "community":
        auth_service = await telegram_factory.get_community_bot_service(community_id, db)
        if not auth_service:
            logger.error(f"‚ùå –°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail=f"Community bot service unavailable for community {community_id}"
            )

    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_type}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Unknown auth type"
        )

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
    telegram_user = auth_service.verify_webapp_init_data(auth_string)
    if not telegram_user:
        logger.warning(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ –¥–ª—è {auth_type} –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid Telegram auth data"
        )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à—É –º–æ–¥–µ–ª—å
    webapp_user = auth_service.get_user_from_telegram_data(telegram_user)

    logger.info(
        f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {webapp_user.telegram_user_id} "
        f"—á–µ—Ä–µ–∑ {auth_type}" + (f" —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}" if community_id else "")
    )

    return webapp_user


async def get_current_user(
        webapp_user: WebAppUser = Depends(verify_telegram_webapp),
        db: AsyncSession = Depends(get_db_session)
) -> User:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.

    Args:
        webapp_user: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        User: –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    from sqlalchemy import select

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    stmt = select(User).where(User.telegram_id == webapp_user.telegram_user_id)
    result = await db.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.update_from_telegram(
            username=webapp_user.username,
            first_name=webapp_user.first_name,
            last_name=webapp_user.last_name,
            language_code=webapp_user.language_code,
            is_premium=webapp_user.is_premium,
            photo_url=webapp_user.photo_url
        )
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=webapp_user.telegram_user_id,
            username=webapp_user.username,
            first_name=webapp_user.first_name,
            last_name=webapp_user.last_name,
            language_code=webapp_user.language_code,
            is_premium=webapp_user.is_premium,
            photo_url=webapp_user.photo_url
        )
        db.add(user)
        logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")

    await db.commit()
    await db.refresh(user)

    return user


async def get_current_user_with_community(
        request: Request,
        current_user: User = Depends(get_current_user),
        db: AsyncSession = Depends(get_db_session)
) -> tuple[User, Optional[int]]:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.

    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å
        current_user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        tuple[User, Optional[int]]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    auth_type, community_id = auth_detector.detect_auth_type(request)
    return current_user, community_id
