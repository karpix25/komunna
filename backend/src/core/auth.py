# backend/src/core/auth.py
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram WebApp
"""

import logging
import hmac
import hashlib
import urllib.parse
from typing import Optional

from fastapi import Depends, HTTPException, Request, status
from sqlalchemy.ext.asyncio import AsyncSession

from ..database import get_db_session
from ..models.user import User
from ..schemas.telegram import WebAppUser
from ..services.telegram_factory import telegram_factory
from .auth_detector import auth_detector

logger = logging.getLogger(__name__)


def verify_telegram_webapp_data(init_data: str, bot_token: str) -> bool:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram WebApp –¥–∞–Ω–Ω—ã—Ö.
    
    –ü—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ:
    1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON –æ–±—ä–µ–∫—Ç–æ–≤ –≤ query string
    2. –ü—Ä–æ–±–ª–µ–º—ã —Å escaped —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ URL
    3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è HMAC
    """
    try:
        # –ü–∞—Ä—Å–∏–º query string
        parsed_data = urllib.parse.parse_qs(init_data)
        
        # –ü–æ–ª—É—á–∞–µ–º hash –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        if 'hash' not in parsed_data:
            logger.error("‚ùå Hash –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ initData")
            return False
            
        received_hash = parsed_data['hash'][0]
        
        # –°–æ–∑–¥–∞–µ–º data_check_string –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—Ä–æ–º–µ hash
        data_check_pairs = []
        for key, values in parsed_data.items():
            if key != 'hash':
                value = values[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                # –ù–ï –¥–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –æ–±—ä–µ–∫—Ç—ã! –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –≤ query string
                data_check_pairs.append(f"{key}={value}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        data_check_pairs.sort()
        data_check_string = '\n'.join(data_check_pairs)
        
        logger.debug(f"üîç Data check string: {data_check_string}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: HMAC-SHA256(bot_token, "WebAppData")
        secret_key = hmac.new(
            bot_token.encode('utf-8'),
            "WebAppData".encode('utf-8'), 
            hashlib.sha256
        ).digest()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π hash: HMAC-SHA256(secret_key, data_check_string)
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        logger.debug(f"üîç Calculated hash: {calculated_hash}")
        logger.debug(f"üîç Received hash: {received_hash}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–µ—à–µ–π
        is_valid = hmac.compare_digest(calculated_hash, received_hash)
        
        if is_valid:
            logger.info("‚úÖ Telegram initData –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        else:
            logger.warning("‚ùå Telegram initData –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
            
        return is_valid
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData: {e}")
        return False


def parse_telegram_user_from_init_data(init_data: str) -> Optional[WebAppUser]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData.
    """
    try:
        parsed_data = urllib.parse.parse_qs(init_data)
        
        if 'user' not in parsed_data:
            logger.error("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ initData")
            return None
            
        user_json = parsed_data['user'][0]
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        import json
        user_data = json.loads(user_json)
        
        return WebAppUser(
            telegram_user_id=user_data['id'],
            username=user_data.get('username'),
            first_name=user_data['first_name'],
            last_name=user_data.get('last_name'),
            language_code=user_data.get('language_code'),
            is_premium=user_data.get('is_premium', False),
            allows_write_to_pm=user_data.get('allows_write_to_pm'),
            photo_url=user_data.get('photo_url')
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData: {e}")
        return None


async def verify_telegram_webapp(
        request: Request,
        db: AsyncSession = Depends(get_db_session)
) -> WebAppUser:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram WebApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    auth_string = request.headers.get("Authorization")
    if not auth_string:
        logger.warning("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Authorization header missing"
        )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_type, community_id = auth_detector.detect_auth_type(request)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if auth_type == "main":
        from ..config import settings
        bot_token = settings.telegram.main_bot_token
        if not bot_token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Main bot token not configured"
            )
    elif auth_type == "community":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–∑ –ë–î
        auth_service = await telegram_factory.get_community_bot_service(community_id, db)
        if not auth_service:
            logger.error(f"‚ùå –°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail=f"Community bot service unavailable"
            )
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        bot_token = "—Ç–æ–∫–µ–Ω_–∏–∑_–±–∞–∑—ã"  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_type}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Unknown auth type"
        )

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData
    if not verify_telegram_webapp_data(auth_string, bot_token):
        logger.warning(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ –¥–ª—è {auth_type} –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid Telegram auth data"
        )

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    webapp_user = parse_telegram_user_from_init_data(auth_string)
    if not webapp_user:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Failed to parse user data"
        )

    logger.info(
        f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {webapp_user.telegram_user_id} "
        f"—á–µ—Ä–µ–∑ {auth_type}" + (f" —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}" if community_id else "")
    )

    return webapp_user


async def get_current_user(
        webapp_user: WebAppUser = Depends(verify_telegram_webapp),
        db: AsyncSession = Depends(get_db_session)
) -> User:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    from sqlalchemy import select

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    stmt = select(User).where(User.telegram_id == webapp_user.telegram_user_id)
    result = await db.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.update_from_telegram(
            username=webapp_user.username,
            first_name=webapp_user.first_name,
            last_name=webapp_user.last_name,
            language_code=webapp_user.language_code,
            is_premium=webapp_user.is_premium,
            photo_url=webapp_user.photo_url
        )
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=webapp_user.telegram_user_id,
            username=webapp_user.username,
            first_name=webapp_user.first_name,
            last_name=webapp_user.last_name,
            language_code=webapp_user.language_code,
            is_premium=webapp_user.is_premium,
            photo_url=webapp_user.photo_url
        )
        db.add(user)
        logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")

    await db.commit()
    await db.refresh(user)

    return user
