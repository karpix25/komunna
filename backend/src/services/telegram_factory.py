"""
–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram —Å–µ—Ä–≤–∏—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏: –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç –∏ –±–æ—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤.
"""

import logging
from typing import Optional, Dict
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from ..models.telegram_bot import TelegramBot
from ..models.community import Community
from ..config import settings
from .telegram_auth import TelegramAuthService

logger = logging.getLogger(__name__)


class TelegramServiceFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–∫–µ–Ω –∏–∑ .env).
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–±—Ä–∏–∫—É."""
        self._services_cache: Dict[str, TelegramAuthService] = {}

    def get_main_bot_service(self) -> Optional[TelegramAuthService]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

        Returns:
            TelegramAuthService –∏–ª–∏ None –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        """
        main_bot_token = settings.telegram.main_bot_token
        if not main_bot_token:
            logger.warning("‚ùå –¢–æ–∫–µ–Ω –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None

        cache_key = "main_bot"
        if cache_key not in self._services_cache:
            self._services_cache[cache_key] = TelegramAuthService(
                bot_token=main_bot_token,
                bot_type="main"
            )
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞")

        return self._services_cache[cache_key]

    async def get_community_bot_service(
            self,
            community_id: int,
            db: AsyncSession
    ) -> Optional[TelegramAuthService]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–æ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Args:
            community_id: ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            TelegramAuthService –∏–ª–∏ None –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        cache_key = f"community_{community_id}"

        if cache_key not in self._services_cache:
            # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            bot_token = await self._get_community_bot_token(community_id, db)
            if not bot_token:
                logger.warning(f"‚ùå –ë–æ—Ç –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            self._services_cache[cache_key] = TelegramAuthService(
                bot_token=bot_token,
                bot_type="community",
                community_id=community_id
            )
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–æ—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}")

        return self._services_cache[cache_key]

    async def _get_community_bot_token(
            self,
            community_id: int,
            db: AsyncSession
    ) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        Args:
            community_id: ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å –µ–≥–æ –±–æ—Ç–æ–º
            stmt = select(Community).where(Community.id == community_id)
            result = await db.execute(stmt)
            community = result.scalar_one_or_none()

            if not community or not community.telegram_bot_id:
                logger.warning(f"‚ùå –°–æ–æ–±—â–µ—Å—Ç–≤–æ {community_id} –∏–ª–∏ –µ–≥–æ –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
            stmt = select(TelegramBot).where(TelegramBot.id == community.telegram_bot_id)
            result = await db.execute(stmt)
            bot = result.scalar_one_or_none()

            if not bot or not bot.is_active:
                logger.warning(f"‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω (–≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}")
            return bot.token

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}: {e}")
            return None

    def clear_cache(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–µ—Ä–≤–∏—Å–æ–≤."""
        self._services_cache.clear()
        logger.info("üóëÔ∏è –ö—ç—à Telegram —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—á–∏—â–µ–Ω")

    def remove_community_from_cache(self, community_id: int) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–∑ –∫—ç—à–∞.

        Args:
            community_id: ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞
        """
        cache_key = f"community_{community_id}"
        if cache_key in self._services_cache:
            del self._services_cache[cache_key]
            logger.info(f"üóëÔ∏è –°–µ—Ä–≤–∏—Å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞–±—Ä–∏–∫–∏
telegram_factory = TelegramServiceFactory()
