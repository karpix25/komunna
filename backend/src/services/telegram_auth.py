"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç aiogram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp.
"""

import logging
from typing import Optional

from aiogram.utils.web_app import safe_parse_webapp_init_data
from aiogram.types import User as AiogramUser

from ..schemas.telegram import WebAppUser, TelegramUserSchema

logger = logging.getLogger(__name__)


class TelegramAuthService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π."""

    def __init__(self, bot_token: str, bot_type: str = "main", community_id: Optional[int] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.

        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            bot_type: –¢–∏–ø –±–æ—Ç–∞ ("main" –∏–ª–∏ "community")
            community_id: ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–¥–ª—è –±–æ—Ç–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤)
        """
        self.bot_token = bot_token
        self.bot_type = bot_type
        self.community_id = community_id

        logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω {bot_type} Telegram —Å–µ—Ä–≤–∏—Å" +
                   (f" –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}" if community_id else ""))

    def verify_webapp_init_data(self, init_data: str) -> Optional[AiogramUser]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö Telegram WebApp.

        Args:
            init_data: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram

        Returns:
            AiogramUser –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º aiogram –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            parsed_data = safe_parse_webapp_init_data(
                token=self.bot_token,
                init_data=init_data
            )

            if parsed_data and parsed_data.user:
                logger.info(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {parsed_data.user.id} "
                    f"—á–µ—Ä–µ–∑ {self.bot_type} –±–æ—Ç" +
                    (f" —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {self.community_id}" if self.community_id else "")
                )
                return parsed_data.user
            else:
                logger.warning(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ WebApp –¥–ª—è {self.bot_type} –±–æ—Ç–∞")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WebApp –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.bot_type} –±–æ—Ç–∞: {e}")
            return None

    def get_user_from_telegram_data(self, telegram_user: AiogramUser) -> WebAppUser:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à—É –º–æ–¥–µ–ª—å.

        Args:
            telegram_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç aiogram

        Returns:
            WebAppUser: –ù–∞—à–∞ –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        return WebAppUser(
            telegram_user_id=telegram_user.id,
            username=telegram_user.username,
            first_name=telegram_user.first_name,
            last_name=telegram_user.last_name,
            language_code=telegram_user.language_code,
            is_premium=telegram_user.is_premium or False,
            allows_write_to_pm=getattr(telegram_user, 'allows_write_to_pm', None),
            photo_url=None  # aiogram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç photo_url –Ω–∞–ø—Ä—è–º—É—é
        )

    def convert_to_frontend_schema(self, webapp_user: WebAppUser) -> TelegramUserSchema:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç WebAppUser –≤ —Å—Ö–µ–º—É –¥–ª—è frontend.

        Args:
            webapp_user: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            TelegramUserSchema: –°—Ö–µ–º–∞ –¥–ª—è frontend
        """
        return TelegramUserSchema(
            id=webapp_user.telegram_user_id,
            first_name=webapp_user.first_name,
            last_name=webapp_user.last_name,
            username=webapp_user.username,
            language_code=webapp_user.language_code,
            is_premium=webapp_user.is_premium,
            photo_url=webapp_user.photo_url
        )

    @property
    def is_main_bot(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–º –±–æ—Ç–æ–º."""
        return self.bot_type == "main"

    @property
    def is_community_bot(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."""
        return self.bot_type == "community"
