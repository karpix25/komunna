# backend/src/services/telegram_bot_service.py
# –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram Bot

import aiohttp
import asyncio
import logging
import os
from typing import Optional, Dict, Any
from telegram import Bot
from telegram.error import TelegramError
import json

logger = logging.getLogger(__name__)


class TelegramBotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Telegram Bot API"""

    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.bot_service_url = os.getenv("BOT_SERVICE_URL", "http://bot:8001")
        self.bot = None

        if self.bot_token:
            self.bot = Bot(token=self.bot_token)
        else:
            logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - bot service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    async def validate_user_by_id(self, telegram_id: str) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID —á–µ—Ä–µ–∑ Bot API
        """
        if not self.bot:
            return {
                "valid": False,
                "user": None,
                "error": "Bot token not configured"
            }

        try:
            telegram_id_int = int(telegram_id)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            chat_member = await self.bot.get_chat_member(
                chat_id=telegram_id_int,
                user_id=telegram_id_int
            )

            user = chat_member.user

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                "telegram_id": str(user.id),
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "is_bot": user.is_bot,
                "is_premium": getattr(user, 'is_premium', False),
                "language_code": getattr(user, 'language_code', None),
                "validation_method": "telegram_bot_api",
                "chat_member_status": chat_member.status
            }

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Bot API")

            return {
                "valid": True,
                "user": user_data,
                "error": None
            }

        except ValueError:
            return {
                "valid": False,
                "user": None,
                "error": "Invalid telegram_id format"
            }
        except TelegramError as e:
            logger.error(f"Telegram API error for user {telegram_id}: {str(e)}")
            return {
                "valid": False,
                "user": None,
                "error": f"Telegram API error: {str(e)}"
            }
        except Exception as e:
            logger.error(f"Unexpected error validating user {telegram_id}: {str(e)}")
            return {
                "valid": False,
                "user": None,
                "error": f"Validation error: {str(e)}"
            }

    async def send_validation_message(self, telegram_id: str, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if not self.bot:
            logger.error("Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        try:
            await self.bot.send_message(
                chat_id=int(telegram_id),
                text=message
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {str(e)}")
            return False

    async def request_user_validation(self, telegram_id: str) -> Dict[str, Any]:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        """
        validation_message = f"""
üîê –ó–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞

–°–∏—Å—Ç–µ–º–∞ Communa –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /validate

ID –∑–∞–ø—Ä–æ—Å–∞: {telegram_id}
"""

        message_sent = await self.send_validation_message(telegram_id, validation_message)

        if message_sent:
            return {
                "valid": True,
                "user": None,
                "error": None,
                "message": "Validation request sent to user"
            }
        else:
            return {
                "valid": False,
                "user": None,
                "error": "Failed to send validation request"
            }

    async def check_bot_status(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bot API
        """
        if not self.bot:
            return {
                "status": "unavailable",
                "error": "Bot token not configured"
            }

        try:
            bot_info = await self.bot.get_me()
            return {
                "status": "available",
                "bot_info": {
                    "id": bot_info.id,
                    "username": bot_info.username,
                    "first_name": bot_info.first_name,
                    "can_join_groups": bot_info.can_join_groups,
                    "can_read_all_group_messages": bot_info.can_read_all_group_messages,
                    "supports_inline_queries": bot_info.supports_inline_queries
                },
                "error": None
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e)
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_bot_service = TelegramBotService()

# ========================================================================
# backend/src/api/v1/endpoints/telegram.py
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π

from fastapi import APIRouter, HTTPException, Depends, BackgroundTasks
from pydantic import BaseModel, Field
from typing import Optional
import logging
from ...services.telegram_bot_service import telegram_bot_service

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/telegram", tags=["telegram"])


class TelegramUserValidate(BaseModel):
    telegram_id: str = Field(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram")
    username: Optional[str] = Field(None, description="Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    first_name: Optional[str] = Field(None, description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    last_name: Optional[str] = Field(None, description="–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    request_confirmation: Optional[bool] = Field(False, description="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


class TelegramValidateResponse(BaseModel):
    valid: bool
    user: Optional[dict]
    error: Optional[str]
    confirmation_requested: Optional[bool] = False


# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async def get_current_user():
    return {"user_id": "authenticated_user"}


@router.post("/validate", response_model=TelegramValidateResponse)
async def validate_telegram_user(
        user_data: TelegramUserValidate,
        background_tasks: BackgroundTasks,
        current_user=Depends(get_current_user)
):
    """
    –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram —á–µ—Ä–µ–∑ Bot API

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ü—Ä—è–º—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ Bot API
    - –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    """

    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        bot_status = await telegram_bot_service.check_bot_status()
        if bot_status["status"] != "available":
            raise HTTPException(
                status_code=503,
                detail=f"Main bot service unavailable: {bot_status.get('error', 'Unknown error')}"
            )

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_data.request_confirmation:
            result = await telegram_bot_service.request_user_validation(user_data.telegram_id)
            return TelegramValidateResponse(
                valid=result["valid"],
                user=result["user"],
                error=result["error"],
                confirmation_requested=True
            )

        # –ü—Ä—è–º–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Bot API
        result = await telegram_bot_service.validate_user_by_id(user_data.telegram_id)

        # –ï—Å–ª–∏ –ø—Ä—è–º–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –º–æ–∂–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not result["valid"] and "Forbidden" in str(result.get("error", "")):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
            background_tasks.add_task(
                telegram_bot_service.request_user_validation,
                user_data.telegram_id
            )

            return TelegramValidateResponse(
                valid=False,
                user=None,
                error="User needs to start dialog with bot first. Validation request sent.",
                confirmation_requested=True
            )

        return TelegramValidateResponse(
            valid=result["valid"],
            user=result["user"],
            error=result["error"]
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Internal validation error: {str(e)}"
        )


@router.get("/bot-status")
async def get_bot_status(current_user=Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Telegram –±–æ—Ç–∞"""
    return await telegram_bot_service.check_bot_status()


@router.post("/send-message/{telegram_id}")
async def send_message_to_user(
        telegram_id: str,
        message: str,
        current_user=Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    success = await telegram_bot_service.send_validation_message(telegram_id, message)

    if success:
        return {"success": True, "message": "Message sent successfully"}
    else:
        raise HTTPException(
            status_code=400,
            detail="Failed to send message"
        )
    