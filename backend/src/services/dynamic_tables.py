"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é DDL –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤
- –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import logging
import uuid
from typing import Dict, Type, Optional, List
from datetime import datetime

from sqlalchemy import (
    BigInteger, Integer, String, Text, Boolean, DateTime, JSON,
    Enum, ForeignKey, Index, UniqueConstraint, text
)
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.ext.asyncio import AsyncSession

from ..database import Base, engine, execute_raw_sql, table_exists
from ..models.base import TimestampMixin, SoftDeleteMixin

logger = logging.getLogger(__name__)


class DynamicTableFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü —Å–æ–æ–±—â–µ—Å—Ç–≤.

    –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º table_key –∫–∞–∫ —Å—É—Ñ—Ñ–∏–∫—Å–∞.
    """

    @staticmethod
    def generate_table_key() -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Returns:
            str: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'comm_xxxxx'
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π UUID (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)
        short_uuid = str(uuid.uuid4()).replace('-', '')[:8]
        return f"comm_{short_uuid}"

    @staticmethod
    def get_table_name(base_name: str, table_key: str) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª—é—á–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Args:
            base_name: –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'courses')
            table_key: –ö–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Returns:
            str: –ü–æ–ª–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'courses_comm_12345678')
        """
        return f"{base_name}_{table_key}"

    @classmethod
    async def create_community_tables(cls, table_key: str) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–∞–±–ª–∏—Ü –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Args:
            table_key: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
        """
        logger.info(f"üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å –∫–ª—é—á–æ–º: {table_key}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º DDL –¥–ª—è –≤—Å–µ—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü
            ddl_statements = cls._get_all_table_ddl(table_key)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π DDL –∑–∞–ø—Ä–æ—Å
            for table_name, ddl in ddl_statements.items():
                logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                await execute_raw_sql(ddl)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            await cls._create_indexes(table_key)

            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {table_key} —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è {table_key}: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            await cls.drop_community_tables(table_key)
            raise

    @classmethod
    async def drop_community_tables(cls, table_key: str) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Args:
            table_key: –ö–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        logger.warning(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {table_key}")

        table_names = [
            "media_files", "points_ledger", "communities_levels",
            "lesson_progress", "lessons", "course_modules",
            "courses", "community_users"
        ]

        for base_name in table_names:
            table_name = cls.get_table_name(base_name, table_key)
            try:
                if await table_exists(table_name):
                    await execute_raw_sql(f"DROP TABLE IF EXISTS {table_name} CASCADE")
                    logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")

    @classmethod
    def _get_all_table_ddl(cls, table_key: str) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç DDL –¥–ª—è –≤—Å–µ—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü.

        Args:
            table_key: –ö–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Ç–∞–±–ª–∏—Ü—ã: DDL_–∑–∞–ø—Ä–æ—Å}
        """
        return {
            cls.get_table_name("community_users", table_key): cls._get_community_users_ddl(table_key),
            cls.get_table_name("courses", table_key): cls._get_courses_ddl(table_key),
            cls.get_table_name("course_modules", table_key): cls._get_course_modules_ddl(table_key),
            cls.get_table_name("lessons", table_key): cls._get_lessons_ddl(table_key),
            cls.get_table_name("lesson_progress", table_key): cls._get_lesson_progress_ddl(table_key),
            cls.get_table_name("communities_levels", table_key): cls._get_communities_levels_ddl(table_key),
            cls.get_table_name("points_ledger", table_key): cls._get_points_ledger_ddl(table_key),
            cls.get_table_name("media_files", table_key): cls._get_media_files_ddl(table_key),
        }

    @classmethod
    def _get_community_users_ddl(cls, table_key: str) -> str:
        """DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."""
        table_name = cls.get_table_name("community_users", table_key)
        return f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id BIGSERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'suspended', 'pending')),
            joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            last_activity TIMESTAMP WITH TIME ZONE,
            xp_points INTEGER DEFAULT 0,
            level INTEGER DEFAULT 1,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            deleted_at TIMESTAMP WITH TIME ZONE
        );
        """

    @classmethod
    def _get_courses_ddl(cls, table_key: str) -> str:
        """DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∫—É—Ä—Å–æ–≤."""
        table_name = cls.get_table_name("courses", table_key)
        community_users_table = cls.get_table_name("community_users", table_key)
        return f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id BIGSERIAL PRIMARY KEY,
            title VARCHAR(500) NOT NULL,
            description TEXT,
            cover_url TEXT,
            status VARCHAR(20) DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'archived')),
            is_locked BOOLEAN DEFAULT FALSE,
            requirements JSON,
            tags JSON,
            sort_order INTEGER DEFAULT 0,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            created_by BIGINT REFERENCES {community_users_table}(id) ON DELETE SET NULL,
            deleted_at TIMESTAMP WITH TIME ZONE,
            published_at TIMESTAMP WITH TIME ZONE
        );
        """

    @classmethod
    def _get_course_modules_ddl(cls, table_key: str) -> str:
        """DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–æ–≤."""
        table_name = cls.get_table_name("course_modules", table_key)
        courses_table = cls.get_table_name("courses", table_key)
        community_users_table = cls.get_table_name("community_users", table_key)
        return f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id BIGSERIAL PRIMARY KEY,
            course_id BIGINT NOT NULL REFERENCES {courses_table}(id) ON DELETE CASCADE,
            title VARCHAR(500) NOT NULL,
            sort_order INTEGER DEFAULT 0,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            deleted_at TIMESTAMP WITH TIME ZONE,
            created_by BIGINT REFERENCES {community_users_table}(id) ON DELETE SET NULL
        );
        """

    @classmethod
    def _get_lessons_ddl(cls, table_key: str) -> str:
        """DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —É—Ä–æ–∫–æ–≤."""
        table_name = cls.get_table_name("lessons", table_key)
        courses_table = cls.get_table_name("courses", table_key)
        modules_table = cls.get_table_name("course_modules", table_key)
        community_users_table = cls.get_table_name("community_users", table_key)
        return f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id BIGSERIAL PRIMARY KEY,
            course_id BIGINT REFERENCES {courses_table}(id) ON DELETE CASCADE,
            module_id BIGINT REFERENCES {modules_table}(id) ON DELETE CASCADE,
            title VARCHAR(500) NOT NULL,
            content_tiptap JSONB,
            is_published BOOLEAN DEFAULT FALSE,
            sort_order INTEGER DEFAULT 0,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            deleted_at TIMESTAMP WITH TIME ZONE,
            created_by BIGINT REFERENCES {community_users_table}(id) ON DELETE SET NULL
        );
        """

    @classmethod
    def _get_lesson_progress_ddl(cls, table_key: str) -> str:
        """DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–æ–≤."""
        table_name = cls.get_table_name("lesson_progress", table_key)
        community_users_table = cls.get_table_name("community_users", table_key)
        lessons_table = cls.get_table_name("lessons", table_key)
        return f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id BIGSERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL REFERENCES {community_users_table}(id) ON DELETE CASCADE,
            lesson_id BIGINT NOT NULL REFERENCES {lessons_table}(id) ON DELETE CASCADE,
            status VARCHAR(20) DEFAULT 'in_progress' CHECK (status IN ('in_progress', 'completed')),
            started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            completed_at TIMESTAMP WITH TIME ZONE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(user_id, lesson_id)
        );
        """

    @classmethod
    def _get_communities_levels_ddl(cls, table_key: str) -> str:
        """DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —É—Ä–æ–≤–Ω–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."""
        table_name = cls.get_table_name("communities_levels", table_key)
        community_users_table = cls.get_table_name("community_users", table_key)
        return f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id BIGSERIAL PRIMARY KEY,
            level_id INTEGER NOT NULL,
            level_name VARCHAR(100) NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            deleted_at TIMESTAMP WITH TIME ZONE,
            created_by BIGINT REFERENCES {community_users_table}(id) ON DELETE SET NULL,
            UNIQUE(level_id)
        );
        """

    @classmethod
    def _get_points_ledger_ddl(cls, table_key: str) -> str:
        """DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∂—É—Ä–Ω–∞–ª–∞ –æ—á–∫–æ–≤."""
        table_name = cls.get_table_name("points_ledger", table_key)
        community_users_table = cls.get_table_name("community_users", table_key)
        return f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id BIGSERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL REFERENCES {community_users_table}(id) ON DELETE CASCADE,
            points INTEGER NOT NULL,
            description VARCHAR(500),
            rule_id BIGINT REFERENCES gamification_rules(id) ON DELETE SET NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            get_by BIGINT REFERENCES {community_users_table}(id) ON DELETE SET NULL
        );
        """

    @classmethod
    def _get_media_files_ddl(cls, table_key: str) -> str:
        """DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤."""
        table_name = cls.get_table_name("media_files", table_key)
        community_users_table = cls.get_table_name("community_users", table_key)
        lessons_table = cls.get_table_name("lessons", table_key)
        return f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id BIGSERIAL PRIMARY KEY,
            uploaded_by BIGINT NOT NULL REFERENCES {community_users_table}(id) ON DELETE CASCADE,
            original_filename VARCHAR(500) NOT NULL,
            file_path TEXT NOT NULL,
            file_type VARCHAR(10) NOT NULL,
            lesson_id BIGINT REFERENCES {lessons_table}(id) ON DELETE CASCADE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            deleted_at TIMESTAMP WITH TIME ZONE
        );
        """

    @classmethod
    async def _create_indexes(cls, table_key: str) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –≤—Å–µ—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü.

        Args:
            table_key: –ö–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        """
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {table_key}")

        indexes = [
            # community_users –∏–Ω–¥–µ–∫—Å—ã
            f"CREATE INDEX IF NOT EXISTS ix_community_users_{table_key}_user_id ON community_users_{table_key}(user_id);",
            f"CREATE INDEX IF NOT EXISTS ix_community_users_{table_key}_status ON community_users_{table_key}(status);",
            f"CREATE INDEX IF NOT EXISTS ix_community_users_{table_key}_xp_points ON community_users_{table_key}(xp_points);",
            f"CREATE INDEX IF NOT EXISTS ix_community_users_{table_key}_level ON community_users_{table_key}(level);",

            # courses –∏–Ω–¥–µ–∫—Å—ã
            f"CREATE INDEX IF NOT EXISTS ix_courses_{table_key}_status ON courses_{table_key}(status);",
            f"CREATE INDEX IF NOT EXISTS ix_courses_{table_key}_created_by ON courses_{table_key}(created_by);",
            f"CREATE INDEX IF NOT EXISTS ix_courses_{table_key}_sort_order ON courses_{table_key}(sort_order);",
            f"CREATE INDEX IF NOT EXISTS ix_courses_{table_key}_tags ON courses_{table_key} USING GIN(tags);",

            # course_modules –∏–Ω–¥–µ–∫—Å—ã
            f"CREATE INDEX IF NOT EXISTS ix_course_modules_{table_key}_course_id ON course_modules_{table_key}(course_id);",
            f"CREATE INDEX IF NOT EXISTS ix_course_modules_{table_key}_sort_order ON course_modules_{table_key}(sort_order);",

            # lessons –∏–Ω–¥–µ–∫—Å—ã
            f"CREATE INDEX IF NOT EXISTS ix_lessons_{table_key}_course_id ON lessons_{table_key}(course_id);",
            f"CREATE INDEX IF NOT EXISTS ix_lessons_{table_key}_module_id ON lessons_{table_key}(module_id);",
            f"CREATE INDEX IF NOT EXISTS ix_lessons_{table_key}_is_published ON lessons_{table_key}(is_published);",
            f"CREATE INDEX IF NOT EXISTS ix_lessons_{table_key}_sort_order ON lessons_{table_key}(sort_order);",

            # lesson_progress –∏–Ω–¥–µ–∫—Å—ã
            f"CREATE INDEX IF NOT EXISTS ix_lesson_progress_{table_key}_user_id ON lesson_progress_{table_key}(user_id);",
            f"CREATE INDEX IF NOT EXISTS ix_lesson_progress_{table_key}_lesson_id ON lesson_progress_{table_key}(lesson_id);",
            f"CREATE INDEX IF NOT EXISTS ix_lesson_progress_{table_key}_status ON lesson_progress_{table_key}(status);",

            # points_ledger –∏–Ω–¥–µ–∫—Å—ã
            f"CREATE INDEX IF NOT EXISTS ix_points_ledger_{table_key}_user_id ON points_ledger_{table_key}(user_id);",
            f"CREATE INDEX IF NOT EXISTS ix_points_ledger_{table_key}_created_at ON points_ledger_{table_key}(created_at);",
            f"CREATE INDEX IF NOT EXISTS ix_points_ledger_{table_key}_rule_id ON points_ledger_{table_key}(rule_id);",

            # communities_levels –∏–Ω–¥–µ–∫—Å—ã
            f"CREATE INDEX IF NOT EXISTS ix_communities_levels_{table_key}_level_id ON communities_levels_{table_key}(level_id);",

            # media_files –∏–Ω–¥–µ–∫—Å—ã
            f"CREATE INDEX IF NOT EXISTS ix_media_files_{table_key}_uploaded_by ON media_files_{table_key}(uploaded_by);",
            f"CREATE INDEX IF NOT EXISTS ix_media_files_{table_key}_lesson_id ON media_files_{table_key}(lesson_id);",
            f"CREATE INDEX IF NOT EXISTS ix_media_files_{table_key}_file_type ON media_files_{table_key}(file_type);",
        ]

        for index_sql in indexes:
            try:
                await execute_raw_sql(index_sql)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å: {e}")

    @classmethod
    async def check_community_tables_exist(cls, table_key: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Args:
            table_key: –ö–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        """
        required_tables = [
            "community_users", "courses", "course_modules", "lessons",
            "lesson_progress", "communities_levels", "points_ledger", "media_files"
        ]

        for base_name in required_tables:
            table_name = cls.get_table_name(base_name, table_key)
            if not await table_exists(table_name):
                return False

        return True

    @classmethod
    async def get_community_table_stats(cls, table_key: str) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Args:
            table_key: –ö–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Returns:
            Dict[str, int]: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        """
        stats = {}
        table_names = [
            "community_users", "courses", "course_modules", "lessons",
            "lesson_progress", "communities_levels", "points_ledger", "media_files"
        ]

        for base_name in table_names:
            table_name = cls.get_table_name(base_name, table_key)
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º COUNT –∑–∞–ø—Ä–æ—Å
                from ..database import get_db_session_context
                async with get_db_session_context() as db:
                    result = await db.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
                    count = result.scalar()
                    stats[base_name] = count
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {table_name}: {e}")
                stats[base_name] = 0

        return stats


class DynamicTableManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤ –∏ —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏.
    """

    def __init__(self):
        self.factory = DynamicTableFactory()

    async def create_new_community_tables(self, community_name: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Args:
            community_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)

        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π table_key

        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
        """
        table_key = self.factory.generate_table_key()

        logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ '{community_name}' —Å –∫–ª—é—á–æ–º '{table_key}'")

        try:
            await self.factory.create_community_tables(table_key)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ—Å—Ç–≤–æ '{community_name}' —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return table_key
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ '{community_name}': {e}")
            raise

    async def delete_community_tables(self, table_key: str, community_name: str = None) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Args:
            table_key: –ö–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            community_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        name_info = f" '{community_name}'" if community_name else ""
        logger.warning(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞{name_info} —Å –∫–ª—é—á–æ–º '{table_key}'")

        await self.factory.drop_community_tables(table_key)
        logger.warning(f"‚úÖ –°–æ–æ–±—â–µ—Å—Ç–≤–æ{name_info} —É–¥–∞–ª–µ–Ω–æ")

    async def verify_community_tables(self, table_key: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Args:
            table_key: –ö–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–æ—Ä—è–¥–∫–µ
        """
        return await self.factory.check_community_tables_exist(table_key)

    async def repair_community_tables(self, table_key: str) -> None:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

        Args:
            table_key: –ö–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        logger.info(f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ '{table_key}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö
        required_tables = [
            "community_users", "courses", "course_modules", "lessons",
            "lesson_progress", "communities_levels", "points_ledger", "media_files"
        ]

        ddl_statements = self.factory._get_all_table_ddl(table_key)

        for base_name in required_tables:
            table_name = self.factory.get_table_name(base_name, table_key)

            if not await table_exists(table_name):
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                await execute_raw_sql(ddl_statements[table_name])

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        await self.factory._create_indexes(table_key)

        logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è '{table_key}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    async def get_community_info(self, table_key: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –∏ –µ–≥–æ —Ç–∞–±–ª–∏—Ü–∞—Ö.

        Args:
            table_key: –ö–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
        """
        exists = await self.verify_community_tables(table_key)
        stats = await self.factory.get_community_table_stats(table_key) if exists else {}

        return {
            "table_key": table_key,
            "tables_exist": exists,
            "table_stats": stats,
            "total_records": sum(stats.values()) if stats else 0
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
dynamic_table_manager = DynamicTableManager()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = [
    "DynamicTableFactory",
    "DynamicTableManager",
    "dynamic_table_manager",
]
