"""
API endpoints –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç endpoints –¥–ª—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import logging
from typing import Dict, Any

from fastapi import APIRouter, Depends, HTTPException, Request, status
from sqlalchemy.ext.asyncio import AsyncSession

from ....database import get_db_session
from ....models.user import User
from ....schemas.telegram import TelegramValidationResponse, TelegramUserSchema
from ....core.auth import verify_telegram_webapp, get_current_user
from ....services.telegram_factory import telegram_factory  # üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–û
from ....core.auth_detector import auth_detector  # üîÑ –î–û–ë–ê–í–õ–ï–ù–û

logger = logging.getLogger(__name__)

router = APIRouter()


@router.post(
    "/telegram/validate",
    response_model=TelegramValidationResponse,
    summary="–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö Telegram WebApp –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
)
async def validate_telegram_user(
    request: Request,
    db: AsyncSession = Depends(get_db_session)
) -> TelegramValidationResponse:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
    - –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Ç–æ–∫–µ–Ω –∏–∑ .env)
    - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (—Ç–æ–∫–µ–Ω –∏–∑ –ë–î)

    Returns:
        TelegramValidationResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        auth_type, community_id = auth_detector.detect_auth_type(request)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º Telegram –¥–∞–Ω–Ω—ã–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –Ω—É–∂–Ω—ã–π –±–æ—Ç)
        webapp_user = await verify_telegram_webapp(request, db)

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = await get_current_user(webapp_user, db)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ö–µ–º—É –¥–ª—è frontend
        if auth_type == "main":
            auth_service = telegram_factory.get_main_bot_service()
        else:
            auth_service = await telegram_factory.get_community_bot_service(community_id, db)

        if not auth_service:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {auth_type}")
            return TelegramValidationResponse(
                valid=False,
                error="Service unavailable"
            )

        user_schema = auth_service.convert_to_frontend_schema(webapp_user)

        logger.info(
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} "
            f"—á–µ—Ä–µ–∑ {auth_type}" + (f" —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}" if community_id else "")
        )

        return TelegramValidationResponse(
            valid=True,
            user=user_schema
        )

    except HTTPException as e:
        # –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ dependencies
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e.detail}")
        return TelegramValidationResponse(
            valid=False,
            error=e.detail
        )

    except Exception as e:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return TelegramValidationResponse(
            valid=False,
            error="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )


@router.get(
    "/me",
    response_model=TelegramUserSchema,
    summary="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
)
async def get_me(
    current_user: User = Depends(get_current_user)
) -> TelegramUserSchema:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.

    –¢—Ä–µ–±—É–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    Returns:
        TelegramUserSchema: –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return TelegramUserSchema(
        id=current_user.telegram_id,
        first_name=current_user.first_name,
        last_name=current_user.last_name,
        username=current_user.username,
        language_code=current_user.language_code,
        is_premium=current_user.is_premium,
        photo_url=current_user.photo_url
    )


@router.post(
    "/test",
    summary="–¢–µ—Å—Ç–æ–≤—ã–π endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
    description="–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
)
async def test_auth(
    current_user: User = Depends(get_current_user)
) -> Dict[str, Any]:
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç.

    Returns:
        Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    return {
        "authenticated": True,
        "user_id": current_user.telegram_id,
        "username": current_user.username,
        "full_name": current_user.full_name,
        "created_at": current_user.created_at.isoformat()
    }