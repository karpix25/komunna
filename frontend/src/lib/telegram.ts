// frontend/src/lib/telegram.ts
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è Telegram WebApp utilities

declare global {
  interface Window {
    Telegram: {
      WebApp: {
        initData: string;
        initDataUnsafe: {
          user?: {
            id: number;
            first_name: string;
            last_name?: string;
            username?: string;
            language_code?: string;
            is_premium?: boolean;
            photo_url?: string;
            allows_write_to_pm?: boolean;
          };
          auth_date?: number;
          hash?: string;
          query_id?: string;
        };
        ready: () => void;
        expand: () => void;
        enableClosingConfirmation: () => void;
        disableClosingConfirmation: () => void;
        themeParams: {
          bg_color?: string;
          text_color?: string;
          hint_color?: string;
          link_color?: string;
          button_color?: string;
          button_text_color?: string;
          secondary_bg_color?: string;
        };
        openTelegramLink: (url: string) => void;
        showAlert: (message: string) => void;
        showConfirm: (message: string, callback: (confirmed: boolean) => void) => void;
        platform: string;
        version: string;
      };
    };
  }
}

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  is_premium?: boolean;
  photo_url?: string;
}

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';

// –ü–æ–ª—É—á–∞–µ–º Telegram WebApp
const tg = typeof window !== 'undefined' ? window.Telegram?.WebApp : null;

export class TelegramWebApp {
  private static instance: TelegramWebApp;
  private webApp: typeof tg;

  private constructor() {
    this.webApp = tg;
  }

  static getInstance(): TelegramWebApp {
    if (!TelegramWebApp.instance) {
      TelegramWebApp.instance = new TelegramWebApp();
    }
    return TelegramWebApp.instance;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initData
  isInTelegram(): boolean {
    if (!this.webApp) {
      console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }
    
    const hasInitData = !!(this.webApp.initData && this.webApp.initData.length > 0);
    console.log(`üîç Telegram WebApp –ø—Ä–æ–≤–µ—Ä–∫–∞:`, {
      webAppExists: !!this.webApp,
      hasInitData,
      initDataLength: this.webApp.initData?.length || 0,
      platform: this.webApp.platform,
      version: this.webApp.version
    });
    
    return hasInitData;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º initData –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  getInitData(): string {
    if (!this.webApp || !this.webApp.initData) {
      console.warn('‚ö†Ô∏è initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return '';
    }
    
    console.log('üîç initData –ø–æ–ª—É—á–µ–Ω:', {
      length: this.webApp.initData.length,
      preview: this.webApp.initData.substring(0, 100) + '...'
    });
    
    return this.webApp.initData;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUser(): TelegramUser | null {
    if (!this.isInTelegram()) {
      return null;
    }
    
    const user = this.webApp?.initDataUnsafe.user;
    if (!user) {
      console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ initDataUnsafe');
      return null;
    }
    
    console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', {
      id: user.id,
      first_name: user.first_name,
      username: user.username
    });
    
    return user;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
  async validateUser(): Promise<{ valid: boolean; user?: TelegramUser; error?: string }> {
    try {
      if (!this.isInTelegram()) {
        return { 
          valid: false, 
          error: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ Telegram' 
        };
      }

      const initData = this.getInitData();
      if (!initData) {
        return { 
          valid: false, 
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram' 
        };
      }

      console.log('üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initData –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é...');

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initData –Ω–∞–ø—Ä—è–º—É—é –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
      const response = await fetch(`${API_URL}/api/auth/telegram/validate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': initData, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initData –∫–∞–∫ –µ—Å—Ç—å
          'ngrok-skip-browser-warning': 'true'
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', response.status, errorText);
        return {
          valid: false,
          error: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`
        };
      }

      const result = await response.json();
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', result);

      return result;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
      return {
        valid: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
      };
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  init(): void {
    if (!this.webApp) {
      console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      return;
    }

    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
    
    try {
      this.webApp.ready();
      this.webApp.expand();
      this.webApp.enableClosingConfirmation();
      
      console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
        platform: this.webApp.platform,
        version: this.webApp.version,
        theme: this.webApp.themeParams
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp:', error);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
  applyTheme(): void {
    if (!this.webApp) {
      console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã');
      return;
    }

    try {
      const theme = this.webApp.themeParams;
      console.log('üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram:', theme);

      const root = document.documentElement;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      root.style.setProperty('--tg-bg-color', theme.bg_color || '#ffffff');
      root.style.setProperty('--tg-text-color', theme.text_color || '#000000');
      root.style.setProperty('--tg-hint-color', theme.hint_color || '#999999');
      root.style.setProperty('--tg-link-color', theme.link_color || '#0088cc');
      root.style.setProperty('--tg-button-color', theme.button_color || '#0088cc');
      root.style.setProperty('--tg-button-text-color', theme.button_text_color || '#ffffff');
      root.style.setProperty('--tg-secondary-bg-color', theme.secondary_bg_color || '#f1f1f1');

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ body
      document.body.style.backgroundColor = theme.bg_color || '#ffffff';
      document.body.style.color = theme.text_color || '#000000';
      
      console.log('‚úÖ –¢–µ–º–∞ Telegram –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã:', error);
    }
  }

  // –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É (Telegram –∫–æ–Ω—Ç–∞–∫—Ç)
  openTelegramLink(username: string): void {
    if (!this.webApp) {
      console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏');
      // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
      window.open(`https://t.me/${username}`, '_blank');
      return;
    }

    try {
      this.webApp.openTelegramLink(`https://t.me/${username}`);
      console.log(`üîó –û—Ç–∫—Ä—ã—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏:', error);
      // Fallback
      window.open(`https://t.me/${username}`, '_blank');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  showAlert(message: string): void {
    if (this.webApp) {
      try {
        this.webApp.showAlert(message);
        return;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ alert —á–µ—Ä–µ–∑ WebApp:', error);
      }
    }
    
    // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    alert(message);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  showConfirm(message: string): Promise<boolean> {
    return new Promise((resolve) => {
      if (this.webApp) {
        try {
          this.webApp.showConfirm(message, resolve);
          return;
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ confirm —á–µ—Ä–µ–∑ WebApp:', error);
        }
      }
      
      // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
      resolve(confirm(message));
    });
  }

  // –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
  getPlatformInfo(): { platform: string; version: string; inTelegram: boolean } {
    if (!this.webApp) {
      return {
        platform: 'web',
        version: 'unknown',
        inTelegram: false
      };
    }

    return {
      platform: this.webApp.platform || 'unknown',
      version: this.webApp.version || 'unknown',
      inTelegram: this.isInTelegram()
    };
  }

  // –ù–û–í–û–ï: –ó–∞–∫—Ä—ã—Ç—å WebApp
  close(): void {
    if (this.webApp) {
      try {
        this.webApp.disableClosingConfirmation();
        // Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
        console.log('üîö WebApp –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è...');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebApp:', error);
      }
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
export const telegram = TelegramWebApp.getInstance();

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
export { tg };

// –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
export const debugTelegram = () => {
  if (typeof window === 'undefined') {
    console.log('üîç Telegram Debug: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    return;
  }

  const info = {
    windowTelegram: !!window.Telegram,
    webApp: !!window.Telegram?.WebApp,
    initData: window.Telegram?.WebApp?.initData || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    initDataLength: window.Telegram?.WebApp?.initData?.length || 0,
    user: window.Telegram?.WebApp?.initDataUnsafe?.user || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    platform: window.Telegram?.WebApp?.platform || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    version: window.Telegram?.WebApp?.version || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    theme: window.Telegram?.WebApp?.themeParams || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
  };

  console.log('üîç Telegram WebApp Debug Info:', info);
  return info;
};
