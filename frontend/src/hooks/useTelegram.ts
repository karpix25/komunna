'use client'

import { useEffect, useState } from 'react'
import { telegram } from '@/lib/telegram'

interface TelegramUser {
  id: number
  first_name: string
  last_name?: string
  username?: string
  language_code?: string
  is_premium?: boolean
  photo_url?: string
}

interface UseTelegramReturn {
  user: TelegramUser | null
  isInTelegram: boolean
  isValidated: boolean
  isLoading: boolean
  error: string | null
}

export function useTelegram(): UseTelegramReturn {
  const [user, setUser] = useState<TelegramUser | null>(null)
  const [isInTelegram, setIsInTelegram] = useState(false)
  const [isValidated, setIsValidated] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const initializeTelegram = async () => {
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        telegram.init()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Telegram
        const inTelegram = telegram.isInTelegram()
        setIsInTelegram(inTelegram)

        if (!inTelegram) {
          // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          if (process.env.NODE_ENV === 'development') {
            console.warn('‚ö†Ô∏è –ù–µ –≤ Telegram - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')
            const mockUser: TelegramUser = {
              id: 123456789,
              first_name: "Test User",
              username: "testuser",
              language_code: "ru"
            }
            setUser(mockUser)
            setIsValidated(true)
            setIsLoading(false)
            return
          } else {
            setError('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ Telegram')
            setIsLoading(false)
            return
          }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        telegram.applyTheme()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initData
        const initData = telegram.getInitData()
        if (!initData) {
          setError('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram')
          setIsLoading(false)
          return
        }

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ backend
        console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ backend...')
        const validation = await telegram.validateUser()
        
        if (validation.valid && validation.user) {
          console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', validation.user)
          setUser(validation.user)
          setIsValidated(true)
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validation.error)
          setError(validation.error || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        }
      } catch (err) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err)
        setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp')
      } finally {
        setIsLoading(false)
      }
    }

    initializeTelegram()
  }, [])

  return {
    user,
    isInTelegram,
    isValidated,
    isLoading,
    error
  }
}
