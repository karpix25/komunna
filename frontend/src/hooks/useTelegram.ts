// frontend/src/hooks/useTelegram.ts
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Ö—É–∫–∞ –¥–ª—è Telegram WebApp

'use client'

import { useEffect, useState } from 'react'
import { telegram, debugTelegram } from '@/lib/telegram'

interface TelegramUser {
  id: number
  first_name: string
  last_name?: string
  username?: string
  language_code?: string
  is_premium?: boolean
  photo_url?: string
}

interface UseTelegramReturn {
  user: TelegramUser | null
  isInTelegram: boolean
  isValidated: boolean
  isLoading: boolean
  error: string | null
  platformInfo: { platform: string; version: string; inTelegram: boolean }
  retryValidation: () => void
}

export function useTelegram(): UseTelegramReturn {
  const [user, setUser] = useState<TelegramUser | null>(null)
  const [isInTelegram, setIsInTelegram] = useState(false)
  const [isValidated, setIsValidated] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [platformInfo, setPlatformInfo] = useState({ 
    platform: 'unknown', 
    version: 'unknown', 
    inTelegram: false 
  })

  const initializeTelegram = async () => {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram WebApp...')
      setIsLoading(true)
      setError(null)

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp
      await new Promise(resolve => setTimeout(resolve, 100))

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      const debugInfo = debugTelegram()
      console.log('üîç Debug info:', debugInfo)

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
      telegram.init()
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      const platformInfo = telegram.getPlatformInfo()
      setPlatformInfo(platformInfo)
      console.log('üì± Platform info:', platformInfo)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Telegram
      const inTelegram = telegram.isInTelegram()
      setIsInTelegram(inTelegram)
      console.log('üîç In Telegram:', inTelegram)

      if (!inTelegram) {
        // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ Telegram
        if (process.env.NODE_ENV === 'development') {
          console.warn('‚ö†Ô∏è DEVELOPMENT MODE: –ù–µ –≤ Telegram - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')
          
          const mockUser: TelegramUser = {
            id: 123456789,
            first_name: "Test User",
            username: "testuser",
            language_code: "ru",
            is_premium: false
          }
          
          setUser(mockUser)
          setIsValidated(true)
          setIsLoading(false)
          return
        } else {
          setError('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ Telegram')
          setIsLoading(false)
          return
        }
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
      telegram.applyTheme()

      // –ü–æ–ª—É—á–∞–µ–º initData
      const initData = telegram.getInitData()
      console.log('üìä InitData –ø–æ–ª—É—á–µ–Ω:', !!initData, '–¥–ª–∏–Ω–∞:', initData.length)

      if (!initData) {
        setError('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram')
        setIsLoading(false)
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initDataUnsafe
      const telegramUser = telegram.getUser()
      if (!telegramUser) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram')
        setIsLoading(false)
        return
      }

      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', telegramUser)

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ backend
      console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ backend...')
      const validation = await telegram.validateUser()
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validation)
      
      if (validation.valid && validation.user) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
        setUser(validation.user)
        setIsValidated(true)
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validation.error)
        setError(validation.error || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if (process.env.NODE_ENV === 'development') {
          console.warn('‚ö†Ô∏è DEVELOPMENT MODE: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
          setUser(telegramUser)
          setIsValidated(false) // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
        }
      }

    } catch (err) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err)
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      setError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${errorMessage}`)
      
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
      if (process.env.NODE_ENV === 'development') {
        console.warn('‚ö†Ô∏è DEVELOPMENT MODE: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É')
        const mockUser: TelegramUser = {
          id: 123456789,
          first_name: "Debug User",
          username: "debuguser",
          language_code: "ru"
        }
        setUser(mockUser)
        setIsValidated(false)
      }
    } finally {
      setIsLoading(false)
    }
  }

  const retryValidation = () => {
    console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...')
    initializeTelegram()
  }

  useEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window !== 'undefined') {
      initializeTelegram()
    }
  }, [])

  return {
    user,
    isInTelegram,
    isValidated,
    isLoading,
    error,
    platformInfo,
    retryValidation
  }
}
