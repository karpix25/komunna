# docker-compose.yml для Easypanel
# ИСПРАВЛЕННАЯ версия без version и с исправленным frontend

services:
  # Backend API сервер
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: communa_backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - RELOAD=false
      - DB_HOST=postgres
      - DB_NAME=kommuna
      - DB_USER=owner
      - DB_PASSWORD=Gfhjkm123.
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=fa11c75be6628d29470f634f78898ebe5672e642766311f5cc3b49698b1eea8f4ff6891486bf61ad006fd03dec7bb255ca9c92958eeddaa2a7f022306def5591
      - ENCRYPTION_KEY=6c193a5c8ae272bc707b0999633a14d2
      - TELEGRAM_WEBHOOK_DOMAIN=https://n8n-karpix-communa.g44y6r.easypanel.host
      - TELEGRAM_WEBHOOK_SECRET=prod-webhook-secret-2024
      - TELEGRAM_MAIN_BOT_TOKEN=${TELEGRAM_MAIN_BOT_TOKEN}
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - UPLOAD_PATH=./uploads
      - MAX_FILE_SIZE=52428800
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    networks:
      - communa_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Next.js приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: communa_frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=https://n8n-karpix-communa.g44y6r.easypanel.host
      - NEXT_PUBLIC_APP_ENV=production
    depends_on:
      - backend
    networks:
      - communa_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Telegram Bot
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: communa_bot
    environment:
      - TELEGRAM_MAIN_BOT_TOKEN=${TELEGRAM_MAIN_BOT_TOKEN}
      - BACKEND_URL=http://backend:8000
      - WEBAPP_URL=https://n8n-karpix-communa.g44y6r.easypanel.host
      - LOG_LEVEL=INFO
      - DEBUG_MODE=false
    depends_on:
      backend:
        condition: service_started
    volumes:
      - bot_logs:/app/logs
    networks:
      - communa_network
    restart: unless-stopped
    command: ["python", "-m", "src.main"]

  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: communa_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=kommuna
      - POSTGRES_USER=owner
      - POSTGRES_PASSWORD=Gfhjkm123.
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - communa_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U owner -d kommuna"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: communa_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - communa_network
    command: redis-server --appendonly yes --maxmemory 256mb
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  bot_logs:
    driver: local

networks:
  communa_network:
    driver: bridge
