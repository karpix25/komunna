# docker-compose.dev.yml
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Telegram Mini App

services:
  # Backend API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: communaapp_backend_dev
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - RELOAD=true
      - DB_HOST=postgres
      - DB_NAME=kommuna
      - DB_USER=owner
      - DB_PASSWORD=Gfhjkm123.
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=fa11c75be6628d29470f634f78898ebe5672e642766311f5cc3b49698b1eea8f4ff6891486bf61ad006fd03dec7bb255ca9c92958eeddaa2a7f022306def5591
      - ENCRYPTION_KEY=6c193a5c8ae272bc707b0999633a14d2
      - TELEGRAM_WEBHOOK_DOMAIN=https://n8n-karpix-communa.g44y6r.easypanel.host
      - TELEGRAM_WEBHOOK_SECRET=dev-webhook-secret
      - TELEGRAM_MAIN_BOT_TOKEN=${TELEGRAM_MAIN_BOT_TOKEN}
      - LOG_LEVEL=DEBUG  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ª–æ–≥–æ–≤
      - LOG_FORMAT=text  # –ë–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      - UPLOAD_PATH=./uploads
      - MAX_FILE_SIZE=52428800
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend/src:/app/src
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - communaapp_dev_network
    restart: unless-stopped
    # –î–û–ë–ê–í–õ–ï–ù–û: –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–æ–≥–∞—Ö
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      - NEXT_PUBLIC_API_URL=https://n8n-karpix-communa.g44y6r.easypanel.host
      - INTERNAL_API_URL=http://backend:8000
      # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      - NEXT_PUBLIC_DEBUG=true
      - NEXT_PUBLIC_APP_ENV=development
      # –•–æ—Ç-—Ä–µ–ª–æ–∞–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      - CHOKIDAR_USEPOLLING=1
      - WATCHPACK_POLLING=true
      - NPM_FLAGS=--legacy-peer-deps --no-audit --no-fund
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    command: >
      sh -lc "set -e;
      echo 'üîß Frontend Development Mode';
      echo 'üì° API URL: https://n8n-karpix-communa.g44y6r.easypanel.host';
      if [ -f pnpm-lock.yaml ]; then corepack enable && pnpm install;
      elif [ -f yarn.lock ]; then yarn install;
      elif [ -f package-lock.json ]; then npm ci $NPM_FLAGS;
      else npm install $NPM_FLAGS;
      fi;
      echo 'üöÄ –ó–∞–ø—É—Å–∫ Next.js dev —Å–µ—Ä–≤–µ—Ä–∞...';
      npx next dev -H 0.0.0.0 -p 3000"
    networks:
      - communaapp_dev_network
    restart: unless-stopped
    tty: true
    stdin_open: true

  # ü§ñ TELEGRAM BOT –°–ï–†–í–ò–°
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile.dev
    container_name: communaapp_bot_dev
    environment:
      - TELEGRAM_MAIN_BOT_TOKEN=${TELEGRAM_MAIN_BOT_TOKEN}
      - BACKEND_URL=http://backend:8000
      - LOG_LEVEL=DEBUG  # –ë–æ–ª—å—à–µ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      # –î–û–ë–ê–í–õ–ï–ù–û: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      - WEBAPP_URL=https://n8n-karpix-communa.g44y6r.easypanel.host
      - DEBUG_MODE=true
    depends_on:
      backend:
        condition: service_started
    volumes:
      - ./bot/src:/app/src
      - ./logs:/app/logs
    networks:
      - communaapp_dev_network
    restart: unless-stopped
    # –î–û–ë–ê–í–õ–ï–ù–û: –∫–æ–º–∞–Ω–¥–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
    command: >
      sh -c "
      echo 'ü§ñ Telegram Bot Development Mode';
      echo 'üîó Backend URL: http://backend:8000';
      echo 'üåê WebApp URL: https://n8n-karpix-communa.g44y6r.easypanel.host';
      echo 'üîë Bot Token: ${TELEGRAM_MAIN_BOT_TOKEN:0:10}...';
      python -m src.main
      "

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: communaapp_postgres_dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=kommuna
      - POSTGRES_USER=owner
      - POSTGRES_PASSWORD=Gfhjkm123.
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - communaapp_dev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U owner -d kommuna"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: communaapp_redis_dev
    restart: unless-stopped
    ports:
      - "6380:6379"
    networks:
      - communaapp_dev_network
    # –î–û–ë–ê–í–õ–ï–ù–û: –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis
    command: redis-server --appendonly yes --maxmemory 256mb

  # Adminer –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
  adminer:
    image: adminer
    container_name: communaapp_adminer
    restart: always
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=lucas
    depends_on:
      - postgres
    networks:
      - communaapp_dev_network

  # –î–û–ë–ê–í–õ–ï–ù–û: nginx –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CORS
  nginx:
    image: nginx:alpine
    container_name: communaapp_nginx_dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf
