version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: myapp_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-myapp}
      POSTGRES_USER: ${POSTGRES_USER:-myapp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - myapp_network

  redis:
    image: redis:7-alpine
    container_name: myapp_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - myapp_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: myapp_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-myapp_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-myapp}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-false}
    depends_on:
      - postgres
      - redis
    ports:
      - "8000:8000"
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - myapp_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: myapp_frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-MyApp}
    depends_on:
      - backend
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - myapp_network

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: myapp_bot
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - API_URL=http://backend:8000
      - DATABASE_URL=postgresql://${POSTGRES_USER:-myapp_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-myapp}
      - WEBHOOK_URL=${WEBHOOK_URL}
    depends_on:
      - postgres
      - backend
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - myapp_network

  nginx:
    image: nginx:alpine
    container_name: myapp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - myapp_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  myapp_network:
    driver: bridge
